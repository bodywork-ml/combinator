{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Easy MLOps Stacks Sophisticated teams develop their MLOps stack from a combination of best of breed components. This open source community exists to make combining them less of a headache. Credit: Clemens Mewald How It Works Combinator.ml makes it easy to test drive, combine & deploy the stack that's best for you. Terraform is the common language we use to combine stacks. Don't worry if you're not familiar with it, we make it easy to get started with it. You can deploy a test drive, local dev environment or into the clouds of your choice. Every component is published as a terraform module in an open source GitHub repo. Each stack is a terraform module too, which references the terraform modules of the components. We need your help to maintain these! Fork them and contribute PRs please! If you want to add a new one under our GitHub org, join us on #mlops-stacks on the MLOps.community Slack . MLOps Categories Stacks are typically developed from components in the following categories. Category Description Data Data forms the backbone of any MLOps effort. Explore Training Create models in exploratory or production-grade modes. Explore Deployment Deploy your models to integrate them & get business value. Explore Monitoring Understand the behavior of your models in production. Explore Featured Stacks Kubeflow + MLflow By combinator.ml Kubeflow provides orchestration for notebooks, pipelines, and serving. This stack adds MLflow for model management and makes it easy to log models to MLflow from kubeflow notebooks and pipelines. View ClearML + KFServing By combinator.ml ClearML provides experiment tracking, training orchestration and data tracking. This integration plugs it into KFServing for model deployment. View Juju: Kubeflow + MLflow By Canonical Juju from Canonical allows easy combination of technologies: this example uses Juju relations to integrate Kubeflow with MLflow and Seldon Core, as well as Prometheus. View Boxkite + Kubeflow By Basis-AI Boxkite from Basis-AI is an open source project to compare training-time and deployment-time data distributions. KL divergence implemented in PromQL! This stack shows it running in conjunction with Kubeflow, MLflow, Seldon, Prometheus & Grafana. View Pachyderm + Seldon By Pachyderm Use Pachyderm to train a model, and Seldon to deploy it, with full data version control & provenance. View SAME + Kubeflow + MLflow By Microsoft The SAME project, from David Aronchick, founder of Kubeflow at the Microsoft Office of the CTO, provides an easy CLI user experience for data scientists to create reproducible workflows. View Community Founders Luke Marsden - MLOps Consulting Phil Winder - Winder Research Demetrios Brinkmann - MLOps Community Kai Davenport - MLOps Consulting Get involved! Find us in #mlops-stacks on the MLOps.community Slack Join Slack","title":"Easy MLOps Stacks"},{"location":"#easy-mlops-stacks","text":"Sophisticated teams develop their MLOps stack from a combination of best of breed components. This open source community exists to make combining them less of a headache. Credit: Clemens Mewald","title":"Easy MLOps Stacks"},{"location":"#how-it-works","text":"Combinator.ml makes it easy to test drive, combine & deploy the stack that's best for you.","title":"How It Works"},{"location":"#_1","text":"Terraform is the common language we use to combine stacks. Don't worry if you're not familiar with it, we make it easy to get started with it. You can deploy a test drive, local dev environment or into the clouds of your choice.","title":""},{"location":"#_2","text":"Every component is published as a terraform module in an open source GitHub repo. Each stack is a terraform module too, which references the terraform modules of the components. We need your help to maintain these! Fork them and contribute PRs please! If you want to add a new one under our GitHub org, join us on #mlops-stacks on the MLOps.community Slack .","title":""},{"location":"#mlops-categories","text":"Stacks are typically developed from components in the following categories. Category Description Data Data forms the backbone of any MLOps effort. Explore Training Create models in exploratory or production-grade modes. Explore Deployment Deploy your models to integrate them & get business value. Explore Monitoring Understand the behavior of your models in production. Explore","title":"MLOps Categories"},{"location":"#featured-stacks","text":"Kubeflow + MLflow By combinator.ml Kubeflow provides orchestration for notebooks, pipelines, and serving. This stack adds MLflow for model management and makes it easy to log models to MLflow from kubeflow notebooks and pipelines. View ClearML + KFServing By combinator.ml ClearML provides experiment tracking, training orchestration and data tracking. This integration plugs it into KFServing for model deployment. View Juju: Kubeflow + MLflow By Canonical Juju from Canonical allows easy combination of technologies: this example uses Juju relations to integrate Kubeflow with MLflow and Seldon Core, as well as Prometheus. View Boxkite + Kubeflow By Basis-AI Boxkite from Basis-AI is an open source project to compare training-time and deployment-time data distributions. KL divergence implemented in PromQL! This stack shows it running in conjunction with Kubeflow, MLflow, Seldon, Prometheus & Grafana. View Pachyderm + Seldon By Pachyderm Use Pachyderm to train a model, and Seldon to deploy it, with full data version control & provenance. View SAME + Kubeflow + MLflow By Microsoft The SAME project, from David Aronchick, founder of Kubeflow at the Microsoft Office of the CTO, provides an easy CLI user experience for data scientists to create reproducible workflows. View","title":"Featured Stacks"},{"location":"#community-founders","text":"Luke Marsden - MLOps Consulting Phil Winder - Winder Research Demetrios Brinkmann - MLOps Community Kai Davenport - MLOps Consulting","title":"Community Founders"},{"location":"#get-involved","text":"Find us in #mlops-stacks on the MLOps.community Slack Join Slack","title":"Get involved!"},{"location":"CODE_OF_CONDUCT/","text":"Code of Conduct Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at phil@winderresearch.com . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"CODE_OF_CONDUCT/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"CODE_OF_CONDUCT/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"CODE_OF_CONDUCT/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at phil@winderresearch.com . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"CODE_OF_CONDUCT/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"CODE_OF_CONDUCT/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"CODE_OF_CONDUCT/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html . Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq . Translations are available at https://www.contributor-covenant.org/translations .","title":"Attribution"},{"location":"CONTRIBUTING/","text":"Contributing First off, thanks for taking the time to contribute. You're amazing! \ud83c\udf89 \ud83d\ude18 \u2728 The following is a set of guidelines for contributing. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request. Reporting Bugs Suggesting Feature Requests or Enhancements Pull Requests Check Code Style Test Commit Yes! Pull request Code of Conduct Reporting Bugs Bugs are tracked as GitHub issues, tagged with a bug label. Search before you create an issue. When you create an issue, please provide the following information by filling in the template. Core documentation or website issues should be reported to the combinator repository Component or stack issues should be reported to the respective repository, because these may not be owned by the core contributors Suggesting Feature Requests or Enhancements Enhancements or feature requests are tracked as GitHub issues, tagged with an enhancement label. When you create an issue, please provide the following information by filling in the template. Enhancements to combinator in general (e.g. new stacks, new components, new ideas) should be reported to the combinator repository Enhancements to components or stacks should be reported to the respective repository, because these may not be owned by the core contributors Pull Requests Check Code Style Run make lint and make sure all the tests pass. Test Run make test and verify all the tests pass. Commit Commit Message Format <Type>: Short description (fix #1234) Longer description here if necessary BREAKING CHANGE: only contain breaking change Type Must be one of the following: feat : A new feature fix : A bug fix breaking : A breaking change docs : Documentation only changes style : Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc) refactor : A code change that neither fixes a bug nor adds a feature perf : A code change that improves performance test : Adding missing or correcting existing tests chore : Changes to the build process or auxiliary tools and libraries such as documentation generation revert : Reverting changes Subject use the imperative, present tense: \"change\" not \"changed\" nor \"changes\" don't capitalize the first letter no dot (.) at the end reference GitHub issues at the end. If the commit doesn\u2019t completely fix the issue, then use (refs #1234) instead of (fixes #1234) . Body use the imperative, present tense: \"change\" not \"changed\" nor \"changes\". the motivation for the change and contrast this with previous behavior. Yes! Pull request Make your pull request, then describe your changes. Title Follow other PR title format on below. <Type>: Short Description (fix #111) <Type>: Short Description (fix #123, #111, #122) <Type>: Short Description (ref #111) * use present tense: 'change' not 'changed' or 'changes' Description If it has related to issues, add links to the issues (like #123 ) in the description. Code of Conduct See the CODE_OF_CONDUCT.md .","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"First off, thanks for taking the time to contribute. You're amazing! \ud83c\udf89 \ud83d\ude18 \u2728 The following is a set of guidelines for contributing. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request. Reporting Bugs Suggesting Feature Requests or Enhancements Pull Requests Check Code Style Test Commit Yes! Pull request Code of Conduct","title":"Contributing"},{"location":"CONTRIBUTING/#reporting-bugs","text":"Bugs are tracked as GitHub issues, tagged with a bug label. Search before you create an issue. When you create an issue, please provide the following information by filling in the template. Core documentation or website issues should be reported to the combinator repository Component or stack issues should be reported to the respective repository, because these may not be owned by the core contributors","title":"Reporting Bugs"},{"location":"CONTRIBUTING/#suggesting-feature-requests-or-enhancements","text":"Enhancements or feature requests are tracked as GitHub issues, tagged with an enhancement label. When you create an issue, please provide the following information by filling in the template. Enhancements to combinator in general (e.g. new stacks, new components, new ideas) should be reported to the combinator repository Enhancements to components or stacks should be reported to the respective repository, because these may not be owned by the core contributors","title":"Suggesting Feature Requests or Enhancements"},{"location":"CONTRIBUTING/#pull-requests","text":"","title":"Pull Requests"},{"location":"CONTRIBUTING/#check-code-style","text":"Run make lint and make sure all the tests pass.","title":"Check Code Style"},{"location":"CONTRIBUTING/#test","text":"Run make test and verify all the tests pass.","title":"Test"},{"location":"CONTRIBUTING/#commit","text":"","title":"Commit"},{"location":"CONTRIBUTING/#commit-message-format","text":"<Type>: Short description (fix #1234) Longer description here if necessary BREAKING CHANGE: only contain breaking change","title":"Commit Message Format"},{"location":"CONTRIBUTING/#type","text":"Must be one of the following: feat : A new feature fix : A bug fix breaking : A breaking change docs : Documentation only changes style : Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc) refactor : A code change that neither fixes a bug nor adds a feature perf : A code change that improves performance test : Adding missing or correcting existing tests chore : Changes to the build process or auxiliary tools and libraries such as documentation generation revert : Reverting changes","title":"Type"},{"location":"CONTRIBUTING/#subject","text":"use the imperative, present tense: \"change\" not \"changed\" nor \"changes\" don't capitalize the first letter no dot (.) at the end reference GitHub issues at the end. If the commit doesn\u2019t completely fix the issue, then use (refs #1234) instead of (fixes #1234) .","title":"Subject"},{"location":"CONTRIBUTING/#body","text":"use the imperative, present tense: \"change\" not \"changed\" nor \"changes\". the motivation for the change and contrast this with previous behavior.","title":"Body"},{"location":"CONTRIBUTING/#yes-pull-request","text":"Make your pull request, then describe your changes.","title":"Yes! Pull request"},{"location":"CONTRIBUTING/#title","text":"Follow other PR title format on below. <Type>: Short Description (fix #111) <Type>: Short Description (fix #123, #111, #122) <Type>: Short Description (ref #111) * use present tense: 'change' not 'changed' or 'changes'","title":"Title"},{"location":"CONTRIBUTING/#description","text":"If it has related to issues, add links to the issues (like #123 ) in the description.","title":"Description"},{"location":"CONTRIBUTING/#code-of-conduct","text":"See the CODE_OF_CONDUCT.md .","title":"Code of Conduct"},{"location":"components/introduction/","text":"Introduction Combinator components are intend to be best-of-breed point-solutions for specific ML problems. A combination of components build a stack. Since there are multiple components that attempt to solve the same problem, components can be organized into catagories. These are: Data Develop Deploy Monitor Govern Undoubtedly there are components that cross boundaries. When this happens, they are listed in multiple catagories. Data Minio - S3 API compatible cloud-native storage Pachyderm - Data lineage (version control) Feast - Feature store Develop Pachyderm - Pipelines Kubeflow - Pipelines, Notebooks, Training Deploy Kubeflow - Serving Monitor Boxkite - Cloud-native model monitoring Govern MLFlow - Model management","title":"Introduction"},{"location":"components/introduction/#introduction","text":"Combinator components are intend to be best-of-breed point-solutions for specific ML problems. A combination of components build a stack. Since there are multiple components that attempt to solve the same problem, components can be organized into catagories. These are: Data Develop Deploy Monitor Govern Undoubtedly there are components that cross boundaries. When this happens, they are listed in multiple catagories.","title":"Introduction"},{"location":"components/introduction/#data","text":"Minio - S3 API compatible cloud-native storage Pachyderm - Data lineage (version control) Feast - Feature store","title":"Data"},{"location":"components/introduction/#develop","text":"Pachyderm - Pipelines Kubeflow - Pipelines, Notebooks, Training","title":"Develop"},{"location":"components/introduction/#deploy","text":"Kubeflow - Serving","title":"Deploy"},{"location":"components/introduction/#monitor","text":"Boxkite - Cloud-native model monitoring","title":"Monitor"},{"location":"components/introduction/#govern","text":"MLFlow - Model management","title":"Govern"},{"location":"components/data/feast/","text":"Feast The Feast component creates a cloud-native feature store. Website Getting Started Installation Prepare your k8s cluster Install the component by following the instructions in the component's README.md Usage Port forward the bundled Jupyter instance, which by default is running in the feast namespace: kubectl port-forward $(kubectl -n feast get pod -l app=feast-jupyter -o custom-columns=:metadata.name) 8888:8888 -n feast Browse to built in minimal/minimal_ride_hailing.ipynb notebook and run the steps. NOTE: The notebook includes several local Spark commands, which take a long time to complete on smaller clusters.","title":"Feast"},{"location":"components/data/feast/#feast","text":"The Feast component creates a cloud-native feature store. Website","title":"Feast"},{"location":"components/data/feast/#getting-started","text":"","title":"Getting Started"},{"location":"components/data/feast/#installation","text":"Prepare your k8s cluster Install the component by following the instructions in the component's README.md","title":"Installation"},{"location":"components/data/feast/#usage","text":"Port forward the bundled Jupyter instance, which by default is running in the feast namespace: kubectl port-forward $(kubectl -n feast get pod -l app=feast-jupyter -o custom-columns=:metadata.name) 8888:8888 -n feast Browse to built in minimal/minimal_ride_hailing.ipynb notebook and run the steps. NOTE: The notebook includes several local Spark commands, which take a long time to complete on smaller clusters.","title":"Usage"},{"location":"components/data/minio/","text":"Minio The Minio component creates a cloud-native S3 compatible data store. Website","title":"Minio"},{"location":"components/data/minio/#minio","text":"The Minio component creates a cloud-native S3 compatible data store. Website","title":"Minio"},{"location":"components/data/pachyderm/","text":"Pachyderm The Pachyderm component provides both data lineage (version control) and pipelines. Website","title":"Pachyderm"},{"location":"components/data/pachyderm/#pachyderm","text":"The Pachyderm component provides both data lineage (version control) and pipelines. Website","title":"Pachyderm"},{"location":"stacks/introduction/","text":"Introduction Combinator stacks are built from two or more components . A stack represents a common combination of tools to provide end-to-end ML functionality. A specific stack is formed from an oppinionated selection of components , so there may be cross-over between stacks.","title":"Introduction"},{"location":"stacks/introduction/#introduction","text":"Combinator stacks are built from two or more components . A stack represents a common combination of tools to provide end-to-end ML functionality. A specific stack is formed from an oppinionated selection of components , so there may be cross-over between stacks.","title":"Introduction"},{"location":"stacks/kubeflow-mlflow/","text":"Kubeflow + MLFlow Kubeflow provides orchestration for notebooks, pipelines, and serving. This stack adds MLflow for model management and makes it easy to log models to MLflow from kubeflow notebooks and pipelines.","title":"Kubeflow + MLFlow"},{"location":"stacks/kubeflow-mlflow/#kubeflow-mlflow","text":"Kubeflow provides orchestration for notebooks, pipelines, and serving. This stack adds MLflow for model management and makes it easy to log models to MLflow from kubeflow notebooks and pipelines.","title":"Kubeflow + MLFlow"},{"location":"stacks/minio-pachyderm/","text":"Minio + Pachyderm Create a minio-backed Pachyderm cluster for data lineage and pipelines.","title":"Minio + Pachyderm"},{"location":"stacks/minio-pachyderm/#minio-pachyderm","text":"Create a minio-backed Pachyderm cluster for data lineage and pipelines.","title":"Minio + Pachyderm"}]}